{"version":3,"file":"paths-object.cjs","sources":["../../src/transform/paths-object.ts"],"sourcesContent":["import ts from \"typescript\";\nimport { performance } from \"node:perf_hooks\";\nimport { addJSDocComment, oapiRef, stringToAST, tsModifiers, tsPropertyIndex } from \"../lib/ts.js\";\nimport { createRef, debug, getEntries } from \"../lib/utils.js\";\nimport type {\n  GlobalContext,\n  OperationObject,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  ReferenceObject,\n} from \"../types.js\";\nimport transformPathItemObject, { type Method } from \"./path-item-object.js\";\n\nconst PATH_PARAM_RE = /\\{[^}]+\\}/g;\n\n/**\n * Transform the PathsObject node (4.8.8)\n * @see https://spec.openapis.org/oas/v3.1.0#operation-object\n */\nexport default function transformPathsObject(pathsObject: PathsObject, ctx: GlobalContext): ts.TypeNode {\n  const type: ts.TypeElement[] = [];\n  for (const [url, pathItemObject] of getEntries(pathsObject, ctx)) {\n    if (!pathItemObject || typeof pathItemObject !== \"object\") {\n      continue;\n    }\n\n    const pathT = performance.now();\n\n    // handle $ref\n    if (\"$ref\" in pathItemObject) {\n      const property = ts.factory.createPropertySignature(\n        /* modifiers     */ tsModifiers({ readonly: ctx.immutable }),\n        /* name          */ tsPropertyIndex(url),\n        /* questionToken */ undefined,\n        /* type          */ oapiRef(pathItemObject.$ref),\n      );\n      addJSDocComment(pathItemObject, property);\n      type.push(property);\n    } else {\n      const pathItemType = transformPathItemObject(pathItemObject, {\n        path: createRef([\"paths\", url]),\n        ctx,\n      });\n\n      // pathParamsAsTypes\n      if (ctx.pathParamsAsTypes && url.includes(\"{\")) {\n        const pathParams = extractPathParams(pathItemObject, ctx);\n        const matches = url.match(PATH_PARAM_RE);\n        let rawPath = `\\`${url}\\``;\n        if (matches) {\n          for (const match of matches) {\n            const paramName = match.slice(1, -1);\n            const param = pathParams[paramName];\n            switch (param?.schema?.type) {\n              case \"number\":\n              case \"integer\":\n                rawPath = rawPath.replace(match, \"${number}\");\n                break;\n              case \"boolean\":\n                rawPath = rawPath.replace(match, \"${boolean}\");\n                break;\n              default:\n                rawPath = rawPath.replace(match, \"${string}\");\n                break;\n            }\n          }\n          // note: creating a string template literalâ€™s AST manually is hard!\n          // just pass an arbitrary string to TS\n          const pathType = (stringToAST(rawPath)[0] as any)?.expression;\n          if (pathType) {\n            type.push(\n              ts.factory.createIndexSignature(\n                /* modifiers     */ tsModifiers({ readonly: ctx.immutable }),\n                /* parameters    */ [\n                  ts.factory.createParameterDeclaration(\n                    /* modifiers      */ undefined,\n                    /* dotDotDotToken */ undefined,\n                    /* name           */ \"path\",\n                    /* questionToken  */ undefined,\n                    /* type           */ pathType,\n                    /* initializer    */ undefined,\n                  ),\n                ],\n                /* type          */ pathItemType,\n              ),\n            );\n            continue;\n          }\n        }\n      }\n\n      type.push(\n        ts.factory.createPropertySignature(\n          /* modifiers     */ tsModifiers({ readonly: ctx.immutable }),\n          /* name          */ tsPropertyIndex(url),\n          /* questionToken */ undefined,\n          /* type          */ pathItemType,\n        ),\n      );\n\n      debug(`Transformed path \"${url}\"`, \"ts\", performance.now() - pathT);\n    }\n  }\n\n  return ts.factory.createTypeLiteralNode(type);\n}\n\nfunction extractPathParams(pathItemObject: PathItemObject, ctx: GlobalContext) {\n  const params: Record<string, ParameterObject> = {};\n  for (const p of pathItemObject.parameters ?? []) {\n    const resolved = \"$ref\" in p && p.$ref ? ctx.resolve<ParameterObject>(p.$ref) : (p as ParameterObject);\n    if (resolved && resolved.in === \"path\") {\n      params[resolved.name] = resolved;\n    }\n  }\n  for (const method of [\"get\", \"put\", \"post\", \"delete\", \"options\", \"head\", \"patch\", \"trace\"] as Method[]) {\n    if (!(method in pathItemObject)) {\n      continue;\n    }\n    const resolvedMethod = (pathItemObject[method] as ReferenceObject).$ref\n      ? ctx.resolve<OperationObject>((pathItemObject[method] as ReferenceObject).$ref)\n      : (pathItemObject[method] as OperationObject);\n    if (resolvedMethod?.parameters) {\n      for (const p of resolvedMethod.parameters) {\n        const resolvedParam = \"$ref\" in p && p.$ref ? ctx.resolve<ParameterObject>(p.$ref) : (p as ParameterObject);\n        if (resolvedParam && resolvedParam.in === \"path\") {\n          params[resolvedParam.name] = resolvedParam;\n        }\n      }\n    }\n  }\n  return params;\n}\n"],"names":["pathItemObject","getEntries","performance","ts","tsModifiers","tsPropertyIndex","oapiRef","addJSDocComment","transformPathItemObject","createRef","stringToAST","debug"],"mappings":"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"}
{"version":3,"file":"webhooks-object.cjs","sources":["../../src/transform/webhooks-object.ts"],"sourcesContent":["import ts from \"typescript\";\nimport { tsModifiers, tsPropertyIndex } from \"../lib/ts.js\";\nimport { createRef, getEntries } from \"../lib/utils.js\";\nimport type { GlobalContext, WebhooksObject } from \"../types.js\";\nimport transformPathItemObject from \"./path-item-object.js\";\n\nexport default function transformWebhooksObject(webhooksObject: WebhooksObject, options: GlobalContext): ts.TypeNode {\n  const type: ts.TypeElement[] = [];\n\n  for (const [name, pathItemObject] of getEntries(webhooksObject, options)) {\n    type.push(\n      ts.factory.createPropertySignature(\n        /* modifiers     */ tsModifiers({\n          readonly: options.immutable,\n        }),\n        /* name          */ tsPropertyIndex(name),\n        /* questionToken */ undefined,\n        /* type          */ transformPathItemObject(pathItemObject, {\n          path: createRef([\"webhooks\", name]),\n          ctx: options,\n        }),\n      ),\n    );\n  }\n\n  return ts.factory.createTypeLiteralNode(type);\n}\n"],"names":["pathItemObject","getEntries","ts","tsModifiers","tsPropertyIndex","transformPathItemObject","createRef"],"mappings":";;;;;;;;;;;AAMA,SAAwB,uBAAA,CAAwB,gBAAgC,OAAA,EAAqC;AACnH,EAAA,MAAM,OAAyB,EAAC;AAEhC,EAAA,KAAA,MAAW,CAAC,IAAA,EAAMA,gBAAc,KAAKC,gBAAA,CAAW,cAAA,EAAgB,OAAO,CAAA,EAAG;AACxE,IAAA,IAAA,CAAK,IAAA;AAAA,MACHC,YAAG,OAAA,CAAQ,uBAAA;AAAA;AAAA,QACWC,gBAAA,CAAY;AAAA,UAC9B,UAAU,OAAA,CAAQ;AAAA,SACnB,CAAA;AAAA;AAAA,QACmBC,qBAAgB,IAAI,CAAA;AAAA;AAAA,QACpB,MAAA;AAAA;AAAA,QACAC,eAAwBL,gBAAA,EAAgB;AAAA,UAC1D,IAAA,EAAMM,eAAA,CAAU,CAAC,UAAA,EAAY,IAAI,CAAC,CAAA;AAAA,UAClC,GAAA,EAAK;AAAA,SACN;AAAA;AACH,KACF;AAAA,EACF;AAEA,EAAA,OAAOJ,WAAA,CAAG,OAAA,CAAQ,qBAAA,CAAsB,IAAI,CAAA;AAC9C;;;;"}